"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./shared/lib/webgl.js":
/*!*****************************!*\
  !*** ./shared/lib/webgl.js ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*\nMIT License\nCopyright (c) 2017 Pavel Dobryakov\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/ \n// Simulation section\nlet document = window.document;\nconst canvas = document.getElementById(\"smoke-webgl\");\nresizeCanvas();\nlet config = {\n    SIM_RESOLUTION: 128,\n    DYE_RESOLUTION: 1024,\n    CAPTURE_RESOLUTION: 512,\n    DENSITY_DISSIPATION: 1,\n    VELOCITY_DISSIPATION: 0.2,\n    PRESSURE: 0.8,\n    PRESSURE_ITERATIONS: 20,\n    CURL: 30,\n    SPLAT_RADIUS: 0.25,\n    SPLAT_FORCE: 6000,\n    SHADING: true,\n    COLORFUL: true,\n    COLOR_UPDATE_SPEED: 10,\n    PAUSED: false,\n    BACK_COLOR: {\n        r: 0,\n        g: 0,\n        b: 0\n    },\n    TRANSPARENT: false,\n    BLOOM: true,\n    BLOOM_ITERATIONS: 8,\n    BLOOM_RESOLUTION: 256,\n    BLOOM_INTENSITY: 0.8,\n    BLOOM_THRESHOLD: 0.6,\n    BLOOM_SOFT_KNEE: 0.7,\n    SUNRAYS: true,\n    SUNRAYS_RESOLUTION: 196,\n    SUNRAYS_WEIGHT: 1.0\n};\nfunction pointerPrototype() {\n    this.id = -1;\n    this.texcoordX = 0;\n    this.texcoordY = 0;\n    this.prevTexcoordX = 0;\n    this.prevTexcoordY = 0;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.down = false;\n    this.moved = false;\n    this.color = [\n        30,\n        0,\n        300\n    ];\n}\nlet pointers = [];\nlet splatStack = [];\npointers.push(new pointerPrototype());\nconst { gl , ext  } = getWebGLContext(canvas);\nif (isMobile()) {\n    config.DYE_RESOLUTION = 512;\n}\nif (!ext.supportLinearFiltering) {\n    config.DYE_RESOLUTION = 512;\n    config.SHADING = false;\n    config.BLOOM = false;\n    config.SUNRAYS = false;\n}\nfunction getWebGLContext(canvas) {\n    const params = {\n        alpha: true,\n        depth: false,\n        stencil: false,\n        antialias: false,\n        preserveDrawingBuffer: false\n    };\n    let gl = canvas.getContext(\"webgl2\", params);\n    const isWebGL2 = !!gl;\n    if (!isWebGL2) gl = canvas.getContext(\"webgl\", params) || canvas.getContext(\"experimental-webgl\", params);\n    let halfFloat;\n    let supportLinearFiltering;\n    if (isWebGL2) {\n        gl.getExtension(\"EXT_color_buffer_float\");\n        supportLinearFiltering = gl.getExtension(\"OES_texture_float_linear\");\n    } else {\n        halfFloat = gl.getExtension(\"OES_texture_half_float\");\n        supportLinearFiltering = gl.getExtension(\"OES_texture_half_float_linear\");\n    }\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;\n    let formatRGBA;\n    let formatRG;\n    let formatR;\n    if (isWebGL2) {\n        formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\n        formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\n        formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\n    } else {\n        formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n        formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n        formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    }\n    return {\n        gl,\n        ext: {\n            formatRGBA,\n            formatRG,\n            formatR,\n            halfFloatTexType,\n            supportLinearFiltering\n        }\n    };\n}\nfunction getSupportedFormat(gl, internalFormat, format, type) {\n    if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n        switch(internalFormat){\n            case gl.R16F:\n                return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n            case gl.RG16F:\n                return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n            default:\n                return null;\n        }\n    }\n    return {\n        internalFormat,\n        format\n    };\n}\nfunction supportRenderTextureFormat(gl, internalFormat, format, type) {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\n    let fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    return status == gl.FRAMEBUFFER_COMPLETE;\n}\nfunction isMobile() {\n    return /Mobi|Android/i.test(navigator.userAgent);\n}\nfunction captureScreenshot() {\n    let res = getResolution(config.CAPTURE_RESOLUTION);\n    let target = createFBO(res.width, res.height, ext.formatRGBA.internalFormat, ext.formatRGBA.format, ext.halfFloatTexType, gl.NEAREST);\n    render(target);\n    let texture = framebufferToTexture(target);\n    texture = normalizeTexture(texture, target.width, target.height);\n    let captureCanvas = textureToCanvas(texture, target.width, target.height);\n    let datauri = captureCanvas.toDataURL();\n    downloadURI(\"fluid.png\", datauri);\n    URL.revokeObjectURL(datauri);\n}\nfunction framebufferToTexture(target) {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo);\n    let length = target.width * target.height * 4;\n    let texture = new Float32Array(length);\n    gl.readPixels(0, 0, target.width, target.height, gl.RGBA, gl.FLOAT, texture);\n    return texture;\n}\nfunction normalizeTexture(texture, width, height) {\n    let result = new Uint8Array(texture.length);\n    let id = 0;\n    for(let i = height - 1; i >= 0; i--){\n        for(let j = 0; j < width; j++){\n            let nid = i * width * 4 + j * 4;\n            result[nid + 0] = clamp01(texture[id + 0]) * 255;\n            result[nid + 1] = clamp01(texture[id + 1]) * 255;\n            result[nid + 2] = clamp01(texture[id + 2]) * 255;\n            result[nid + 3] = clamp01(texture[id + 3]) * 255;\n            id += 4;\n        }\n    }\n    return result;\n}\nfunction clamp01(input) {\n    return Math.min(Math.max(input, 0), 1);\n}\nfunction textureToCanvas(texture, width, height) {\n    let captureCanvas = document.createElement(\"canvas\");\n    let ctx = captureCanvas.getContext(\"2d\");\n    captureCanvas.width = width;\n    captureCanvas.height = height;\n    let imageData = ctx.createImageData(width, height);\n    imageData.data.set(texture);\n    ctx.putImageData(imageData, 0, 0);\n    return captureCanvas;\n}\nfunction downloadURI(filename, uri) {\n    let link = document.createElement(\"a\");\n    link.download = filename;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\nclass Material {\n    setKeywords(keywords) {\n        let hash = 0;\n        for(let i = 0; i < keywords.length; i++)hash += hashCode(keywords[i]);\n        let program = this.programs[hash];\n        if (program == null) {\n            let fragmentShader = compileShader(gl.FRAGMENT_SHADER, this.fragmentShaderSource, keywords);\n            program = createProgram(this.vertexShader, fragmentShader);\n            this.programs[hash] = program;\n        }\n        if (program == this.activeProgram) return;\n        this.uniforms = getUniforms(program);\n        this.activeProgram = program;\n    }\n    bind() {\n        gl.useProgram(this.activeProgram);\n    }\n    constructor(vertexShader, fragmentShaderSource){\n        this.vertexShader = vertexShader;\n        this.fragmentShaderSource = fragmentShaderSource;\n        this.programs = [];\n        this.activeProgram = null;\n        this.uniforms = [];\n    }\n}\nclass Program {\n    bind() {\n        gl.useProgram(this.program);\n    }\n    constructor(vertexShader, fragmentShader){\n        this.uniforms = {};\n        this.program = createProgram(vertexShader, fragmentShader);\n        this.uniforms = getUniforms(this.program);\n    }\n}\nfunction createProgram(vertexShader, fragmentShader) {\n    let program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) console.trace(gl.getProgramInfoLog(program));\n    return program;\n}\nfunction getUniforms(program) {\n    let uniforms = [];\n    let uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for(let i = 0; i < uniformCount; i++){\n        let uniformName = gl.getActiveUniform(program, i).name;\n        uniforms[uniformName] = gl.getUniformLocation(program, uniformName);\n    }\n    return uniforms;\n}\nfunction compileShader(type, source, keywords) {\n    source = addKeywords(source, keywords);\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) console.trace(gl.getShaderInfoLog(shader));\n    return shader;\n}\nfunction addKeywords(source, keywords) {\n    if (keywords == null) return source;\n    let keywordsString = \"\";\n    keywords.forEach((keyword)=>{\n        keywordsString += \"#define \" + keyword + \"\\n\";\n    });\n    return keywordsString + source;\n}\nconst baseVertexShader = compileShader(gl.VERTEX_SHADER, \"\\n    precision highp float;\\n    attribute vec2 aPosition;\\n    varying vec2 vUv;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    varying vec2 vT;\\n    varying vec2 vB;\\n    uniform vec2 texelSize;\\n    void main () {\\n        vUv = aPosition * 0.5 + 0.5;\\n        vL = vUv - vec2(texelSize.x, 0.0);\\n        vR = vUv + vec2(texelSize.x, 0.0);\\n        vT = vUv + vec2(0.0, texelSize.y);\\n        vB = vUv - vec2(0.0, texelSize.y);\\n        gl_Position = vec4(aPosition, 0.0, 1.0);\\n    }\\n\");\nconst blurVertexShader = compileShader(gl.VERTEX_SHADER, \"\\n    precision highp float;\\n    attribute vec2 aPosition;\\n    varying vec2 vUv;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    uniform vec2 texelSize;\\n    void main () {\\n        vUv = aPosition * 0.5 + 0.5;\\n        float offset = 1.33333333;\\n        vL = vUv - texelSize * offset;\\n        vR = vUv + texelSize * offset;\\n        gl_Position = vec4(aPosition, 0.0, 1.0);\\n    }\\n\");\nconst blurShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying vec2 vUv;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    uniform sampler2D uTexture;\\n    void main () {\\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\\n        sum += texture2D(uTexture, vL) * 0.35294117;\\n        sum += texture2D(uTexture, vR) * 0.35294117;\\n        gl_FragColor = sum;\\n    }\\n\");\nconst copyShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying highp vec2 vUv;\\n    uniform sampler2D uTexture;\\n    void main () {\\n        gl_FragColor = texture2D(uTexture, vUv);\\n    }\\n\");\nconst clearShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying highp vec2 vUv;\\n    uniform sampler2D uTexture;\\n    uniform float value;\\n    void main () {\\n        gl_FragColor = value * texture2D(uTexture, vUv);\\n    }\\n\");\nconst colorShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    uniform vec4 color;\\n    void main () {\\n        gl_FragColor = color;\\n    }\\n\");\nconst checkerboardShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision highp float;\\n    precision highp sampler2D;\\n    varying vec2 vUv;\\n    uniform sampler2D uTexture;\\n    uniform float aspectRatio;\\n    #define SCALE 25.0\\n    void main () {\\n        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\\n        float v = mod(uv.x + uv.y, 2.0);\\n        v = v * 0.1 + 0.8;\\n        gl_FragColor = vec4(vec3(v), 1.0);\\n    }\\n\");\nconst displayShaderSource = \"\\n    precision highp float;\\n    precision highp sampler2D;\\n    varying vec2 vUv;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    varying vec2 vT;\\n    varying vec2 vB;\\n    uniform sampler2D uTexture;\\n    uniform sampler2D uBloom;\\n    uniform sampler2D uSunrays;\\n    uniform sampler2D uDithering;\\n    uniform vec2 ditherScale;\\n    uniform vec2 texelSize;\\n    vec3 linearToGamma (vec3 color) {\\n        color = max(color, vec3(0));\\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\\n    }\\n    void main () {\\n        vec3 c = texture2D(uTexture, vUv).rgb;\\n    #ifdef SHADING\\n        vec3 lc = texture2D(uTexture, vL).rgb;\\n        vec3 rc = texture2D(uTexture, vR).rgb;\\n        vec3 tc = texture2D(uTexture, vT).rgb;\\n        vec3 bc = texture2D(uTexture, vB).rgb;\\n        float dx = length(rc) - length(lc);\\n        float dy = length(tc) - length(bc);\\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\\n        vec3 l = vec3(0.0, 0.0, 1.0);\\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\\n        c *= diffuse;\\n    #endif\\n    #ifdef BLOOM\\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\\n    #endif\\n    #ifdef SUNRAYS\\n        float sunrays = texture2D(uSunrays, vUv).r;\\n        c *= sunrays;\\n    #ifdef BLOOM\\n        bloom *= sunrays;\\n    #endif\\n    #endif\\n    #ifdef BLOOM\\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\\n        noise = noise * 2.0 - 1.0;\\n        bloom += noise / 255.0;\\n        bloom = linearToGamma(bloom);\\n        c += bloom;\\n    #endif\\n        float a = max(c.r, max(c.g, c.b));\\n        gl_FragColor = vec4(c, a);\\n    }\\n\";\nconst bloomPrefilterShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying vec2 vUv;\\n    uniform sampler2D uTexture;\\n    uniform vec3 curve;\\n    uniform float threshold;\\n    void main () {\\n        vec3 c = texture2D(uTexture, vUv).rgb;\\n        float br = max(c.r, max(c.g, c.b));\\n        float rq = clamp(br - curve.x, 0.0, curve.y);\\n        rq = curve.z * rq * rq;\\n        c *= max(rq, br - threshold) / max(br, 0.0001);\\n        gl_FragColor = vec4(c, 0.0);\\n    }\\n\");\nconst bloomBlurShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    varying vec2 vT;\\n    varying vec2 vB;\\n    uniform sampler2D uTexture;\\n    void main () {\\n        vec4 sum = vec4(0.0);\\n        sum += texture2D(uTexture, vL);\\n        sum += texture2D(uTexture, vR);\\n        sum += texture2D(uTexture, vT);\\n        sum += texture2D(uTexture, vB);\\n        sum *= 0.25;\\n        gl_FragColor = sum;\\n    }\\n\");\nconst bloomFinalShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    varying vec2 vT;\\n    varying vec2 vB;\\n    uniform sampler2D uTexture;\\n    uniform float intensity;\\n    void main () {\\n        vec4 sum = vec4(0.0);\\n        sum += texture2D(uTexture, vL);\\n        sum += texture2D(uTexture, vR);\\n        sum += texture2D(uTexture, vT);\\n        sum += texture2D(uTexture, vB);\\n        sum *= 0.25;\\n        gl_FragColor = sum * intensity;\\n    }\\n\");\nconst sunraysMaskShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision highp float;\\n    precision highp sampler2D;\\n    varying vec2 vUv;\\n    uniform sampler2D uTexture;\\n    void main () {\\n        vec4 c = texture2D(uTexture, vUv);\\n        float br = max(c.r, max(c.g, c.b));\\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\\n        gl_FragColor = c;\\n    }\\n\");\nconst sunraysShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision highp float;\\n    precision highp sampler2D;\\n    varying vec2 vUv;\\n    uniform sampler2D uTexture;\\n    uniform float weight;\\n    #define ITERATIONS 16\\n    void main () {\\n        float Density = 0.3;\\n        float Decay = 0.95;\\n        float Exposure = 0.7;\\n        vec2 coord = vUv;\\n        vec2 dir = vUv - 0.5;\\n        dir *= 1.0 / float(ITERATIONS) * Density;\\n        float illuminationDecay = 1.0;\\n        float color = texture2D(uTexture, vUv).a;\\n        for (int i = 0; i < ITERATIONS; i++)\\n        {\\n            coord -= dir;\\n            float col = texture2D(uTexture, coord).a;\\n            color += col * illuminationDecay * weight;\\n            illuminationDecay *= Decay;\\n        }\\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\\n    }\\n\");\nconst splatShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision highp float;\\n    precision highp sampler2D;\\n    varying vec2 vUv;\\n    uniform sampler2D uTarget;\\n    uniform float aspectRatio;\\n    uniform vec3 color;\\n    uniform vec2 point;\\n    uniform float radius;\\n    void main () {\\n        vec2 p = vUv - point.xy;\\n        p.x *= aspectRatio;\\n        vec3 splat = exp(-dot(p, p) / radius) * color;\\n        vec3 base = texture2D(uTarget, vUv).xyz;\\n        gl_FragColor = vec4(base + splat, 1.0);\\n    }\\n\");\nconst advectionShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision highp float;\\n    precision highp sampler2D;\\n    varying vec2 vUv;\\n    uniform sampler2D uVelocity;\\n    uniform sampler2D uSource;\\n    uniform vec2 texelSize;\\n    uniform vec2 dyeTexelSize;\\n    uniform float dt;\\n    uniform float dissipation;\\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\\n        vec2 st = uv / tsize - 0.5;\\n        vec2 iuv = floor(st);\\n        vec2 fuv = fract(st);\\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\\n    }\\n    void main () {\\n    #ifdef MANUAL_FILTERING\\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\\n    #else\\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\\n        vec4 result = texture2D(uSource, coord);\\n    #endif\\n        float decay = 1.0 + dissipation * dt;\\n        gl_FragColor = result / decay;\\n    }\", ext.supportLinearFiltering ? null : [\n    \"MANUAL_FILTERING\"\n]);\nconst divergenceShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying highp vec2 vUv;\\n    varying highp vec2 vL;\\n    varying highp vec2 vR;\\n    varying highp vec2 vT;\\n    varying highp vec2 vB;\\n    uniform sampler2D uVelocity;\\n    void main () {\\n        float L = texture2D(uVelocity, vL).x;\\n        float R = texture2D(uVelocity, vR).x;\\n        float T = texture2D(uVelocity, vT).y;\\n        float B = texture2D(uVelocity, vB).y;\\n        vec2 C = texture2D(uVelocity, vUv).xy;\\n        if (vL.x < 0.0) { L = -C.x; }\\n        if (vR.x > 1.0) { R = -C.x; }\\n        if (vT.y > 1.0) { T = -C.y; }\\n        if (vB.y < 0.0) { B = -C.y; }\\n        float div = 0.5 * (R - L + T - B);\\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\\n    }\\n\");\nconst curlShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying highp vec2 vUv;\\n    varying highp vec2 vL;\\n    varying highp vec2 vR;\\n    varying highp vec2 vT;\\n    varying highp vec2 vB;\\n    uniform sampler2D uVelocity;\\n    void main () {\\n        float L = texture2D(uVelocity, vL).y;\\n        float R = texture2D(uVelocity, vR).y;\\n        float T = texture2D(uVelocity, vT).x;\\n        float B = texture2D(uVelocity, vB).x;\\n        float vorticity = R - L - T + B;\\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\\n    }\\n\");\nconst vorticityShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision highp float;\\n    precision highp sampler2D;\\n    varying vec2 vUv;\\n    varying vec2 vL;\\n    varying vec2 vR;\\n    varying vec2 vT;\\n    varying vec2 vB;\\n    uniform sampler2D uVelocity;\\n    uniform sampler2D uCurl;\\n    uniform float curl;\\n    uniform float dt;\\n    void main () {\\n        float L = texture2D(uCurl, vL).x;\\n        float R = texture2D(uCurl, vR).x;\\n        float T = texture2D(uCurl, vT).x;\\n        float B = texture2D(uCurl, vB).x;\\n        float C = texture2D(uCurl, vUv).x;\\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\\n        force /= length(force) + 0.0001;\\n        force *= curl * C;\\n        force.y *= -1.0;\\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\\n        velocity += force * dt;\\n        velocity = min(max(velocity, -1000.0), 1000.0);\\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\\n    }\\n\");\nconst pressureShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying highp vec2 vUv;\\n    varying highp vec2 vL;\\n    varying highp vec2 vR;\\n    varying highp vec2 vT;\\n    varying highp vec2 vB;\\n    uniform sampler2D uPressure;\\n    uniform sampler2D uDivergence;\\n    void main () {\\n        float L = texture2D(uPressure, vL).x;\\n        float R = texture2D(uPressure, vR).x;\\n        float T = texture2D(uPressure, vT).x;\\n        float B = texture2D(uPressure, vB).x;\\n        float C = texture2D(uPressure, vUv).x;\\n        float divergence = texture2D(uDivergence, vUv).x;\\n        float pressure = (L + R + B + T - divergence) * 0.25;\\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\\n    }\\n\");\nconst gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, \"\\n    precision mediump float;\\n    precision mediump sampler2D;\\n    varying highp vec2 vUv;\\n    varying highp vec2 vL;\\n    varying highp vec2 vR;\\n    varying highp vec2 vT;\\n    varying highp vec2 vB;\\n    uniform sampler2D uPressure;\\n    uniform sampler2D uVelocity;\\n    void main () {\\n        float L = texture2D(uPressure, vL).x;\\n        float R = texture2D(uPressure, vR).x;\\n        float T = texture2D(uPressure, vT).x;\\n        float B = texture2D(uPressure, vB).x;\\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\\n        velocity.xy -= vec2(R - L, T - B);\\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\\n    }\\n\");\nconst blit = (()=>{\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n        -1,\n        -1,\n        -1,\n        1,\n        1,\n        1,\n        1,\n        -1\n    ]), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([\n        0,\n        1,\n        2,\n        0,\n        2,\n        3\n    ]), gl.STATIC_DRAW);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(0);\n    return function(target) {\n        let clear = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (target == null) {\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        } else {\n            gl.viewport(0, 0, target.width, target.height);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo);\n        }\n        if (clear) {\n            gl.clearColor(0.0, 0.0, 0.0, 1.0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        // CHECK_FRAMEBUFFER_STATUS();\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n    };\n})();\nfunction CHECK_FRAMEBUFFER_STATUS() {\n    let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) console.trace(\"Framebuffer error: \" + status);\n}\n_c = CHECK_FRAMEBUFFER_STATUS;\nlet dye;\nlet velocity;\nlet divergence;\nlet curl;\nlet pressure;\nlet bloom;\nlet bloomFramebuffers = [];\nlet sunrays;\nlet sunraysTemp;\nlet ditheringTexture = createTextureAsync(\"LDR_LLL1_0.png\");\nconst blurProgram = new Program(blurVertexShader, blurShader);\nconst copyProgram = new Program(baseVertexShader, copyShader);\nconst clearProgram = new Program(baseVertexShader, clearShader);\nconst colorProgram = new Program(baseVertexShader, colorShader);\nconst checkerboardProgram = new Program(baseVertexShader, checkerboardShader);\nconst bloomPrefilterProgram = new Program(baseVertexShader, bloomPrefilterShader);\nconst bloomBlurProgram = new Program(baseVertexShader, bloomBlurShader);\nconst bloomFinalProgram = new Program(baseVertexShader, bloomFinalShader);\nconst sunraysMaskProgram = new Program(baseVertexShader, sunraysMaskShader);\nconst sunraysProgram = new Program(baseVertexShader, sunraysShader);\nconst splatProgram = new Program(baseVertexShader, splatShader);\nconst advectionProgram = new Program(baseVertexShader, advectionShader);\nconst divergenceProgram = new Program(baseVertexShader, divergenceShader);\nconst curlProgram = new Program(baseVertexShader, curlShader);\nconst vorticityProgram = new Program(baseVertexShader, vorticityShader);\nconst pressureProgram = new Program(baseVertexShader, pressureShader);\nconst gradienSubtractProgram = new Program(baseVertexShader, gradientSubtractShader);\nconst displayMaterial = new Material(baseVertexShader, displayShaderSource);\nfunction initFramebuffers() {\n    let simRes = getResolution(config.SIM_RESOLUTION);\n    let dyeRes = getResolution(config.DYE_RESOLUTION);\n    const texType = ext.halfFloatTexType;\n    const rgba = ext.formatRGBA;\n    const rg = ext.formatRG;\n    const r = ext.formatR;\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n    gl.disable(gl.BLEND);\n    if (dye == null) dye = createDoubleFBO(dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);\n    else dye = resizeDoubleFBO(dye, dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);\n    if (velocity == null) velocity = createDoubleFBO(simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);\n    else velocity = resizeDoubleFBO(velocity, simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);\n    divergence = createFBO(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\n    curl = createFBO(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\n    pressure = createDoubleFBO(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\n    initBloomFramebuffers();\n    initSunraysFramebuffers();\n}\nfunction initBloomFramebuffers() {\n    let res = getResolution(config.BLOOM_RESOLUTION);\n    const texType = ext.halfFloatTexType;\n    const rgba = ext.formatRGBA;\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n    bloom = createFBO(res.width, res.height, rgba.internalFormat, rgba.format, texType, filtering);\n    bloomFramebuffers.length = 0;\n    for(let i = 0; i < config.BLOOM_ITERATIONS; i++){\n        let width = res.width >> i + 1;\n        let height = res.height >> i + 1;\n        if (width < 2 || height < 2) break;\n        let fbo = createFBO(width, height, rgba.internalFormat, rgba.format, texType, filtering);\n        bloomFramebuffers.push(fbo);\n    }\n}\nfunction initSunraysFramebuffers() {\n    let res = getResolution(config.SUNRAYS_RESOLUTION);\n    const texType = ext.halfFloatTexType;\n    const r = ext.formatR;\n    const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n    sunrays = createFBO(res.width, res.height, r.internalFormat, r.format, texType, filtering);\n    sunraysTemp = createFBO(res.width, res.height, r.internalFormat, r.format, texType, filtering);\n}\nfunction createFBO(w, h, internalFormat, format, type, param) {\n    gl.activeTexture(gl.TEXTURE0);\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\n    let fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.viewport(0, 0, w, h);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    let texelSizeX = 1.0 / w;\n    let texelSizeY = 1.0 / h;\n    return {\n        texture,\n        fbo,\n        width: w,\n        height: h,\n        texelSizeX,\n        texelSizeY,\n        attach (id) {\n            gl.activeTexture(gl.TEXTURE0 + id);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            return id;\n        }\n    };\n}\nfunction createDoubleFBO(w, h, internalFormat, format, type, param) {\n    let fbo1 = createFBO(w, h, internalFormat, format, type, param);\n    let fbo2 = createFBO(w, h, internalFormat, format, type, param);\n    return {\n        width: w,\n        height: h,\n        texelSizeX: fbo1.texelSizeX,\n        texelSizeY: fbo1.texelSizeY,\n        get read () {\n            return fbo1;\n        },\n        set read (value){\n            fbo1 = value;\n        },\n        get write () {\n            return fbo2;\n        },\n        set write (value){\n            fbo2 = value;\n        },\n        swap () {\n            let temp = fbo1;\n            fbo1 = fbo2;\n            fbo2 = temp;\n        }\n    };\n}\nfunction resizeFBO(target, w, h, internalFormat, format, type, param) {\n    let newFBO = createFBO(w, h, internalFormat, format, type, param);\n    copyProgram.bind();\n    gl.uniform1i(copyProgram.uniforms.uTexture, target.attach(0));\n    blit(newFBO);\n    return newFBO;\n}\nfunction resizeDoubleFBO(target, w, h, internalFormat, format, type, param) {\n    if (target.width == w && target.height == h) return target;\n    target.read = resizeFBO(target.read, w, h, internalFormat, format, type, param);\n    target.write = createFBO(w, h, internalFormat, format, type, param);\n    target.width = w;\n    target.height = h;\n    target.texelSizeX = 1.0 / w;\n    target.texelSizeY = 1.0 / h;\n    return target;\n}\nfunction createTextureAsync(url) {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array([\n        255,\n        255,\n        255\n    ]));\n    let obj = {\n        texture,\n        width: 1,\n        height: 1,\n        attach (id) {\n            gl.activeTexture(gl.TEXTURE0 + id);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            return id;\n        }\n    };\n    let image = new Image();\n    image.onload = ()=>{\n        obj.width = image.width;\n        obj.height = image.height;\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\n    };\n    image.src = url;\n    return obj;\n}\nfunction updateKeywords() {\n    let displayKeywords = [];\n    if (config.SHADING) displayKeywords.push(\"SHADING\");\n    if (config.BLOOM) displayKeywords.push(\"BLOOM\");\n    if (config.SUNRAYS) displayKeywords.push(\"SUNRAYS\");\n    displayMaterial.setKeywords(displayKeywords);\n}\nupdateKeywords();\ninitFramebuffers();\nmultipleSplats(parseInt(Math.random() * 20) + 5);\nlet lastUpdateTime = Date.now();\nlet colorUpdateTimer = 0.0;\nupdate();\nfunction update() {\n    const dt = calcDeltaTime();\n    if (resizeCanvas()) initFramebuffers();\n    updateColors(dt);\n    applyInputs();\n    if (!config.PAUSED) step(dt);\n    render(null);\n    requestAnimationFrame(update);\n}\nfunction calcDeltaTime() {\n    let now = Date.now();\n    let dt = (now - lastUpdateTime) / 1000;\n    dt = Math.min(dt, 0.016666);\n    lastUpdateTime = now;\n    return dt;\n}\nfunction resizeCanvas() {\n    let width = scaleByPixelRatio(canvas.clientWidth);\n    let height = scaleByPixelRatio(canvas.clientHeight);\n    if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\nfunction updateColors(dt) {\n    if (!config.COLORFUL) return;\n    colorUpdateTimer += dt * config.COLOR_UPDATE_SPEED;\n    if (colorUpdateTimer >= 1) {\n        colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);\n        pointers.forEach((p)=>{\n            p.color = generateColor();\n        });\n    }\n}\nfunction applyInputs() {\n    if (splatStack.length > 0) multipleSplats(splatStack.pop());\n    pointers.forEach((p)=>{\n        if (p.moved) {\n            p.moved = false;\n            splatPointer(p);\n        }\n    });\n}\nfunction step(dt) {\n    gl.disable(gl.BLEND);\n    curlProgram.bind();\n    gl.uniform2f(curlProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0));\n    blit(curl);\n    vorticityProgram.bind();\n    gl.uniform2f(vorticityProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0));\n    gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));\n    gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\n    gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n    blit(velocity.write);\n    velocity.swap();\n    divergenceProgram.bind();\n    gl.uniform2f(divergenceProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0));\n    blit(divergence);\n    clearProgram.bind();\n    gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0));\n    gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE);\n    blit(pressure.write);\n    pressure.swap();\n    pressureProgram.bind();\n    gl.uniform2f(pressureProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));\n    for(let i = 0; i < config.PRESSURE_ITERATIONS; i++){\n        gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1));\n        blit(pressure.write);\n        pressure.swap();\n    }\n    gradienSubtractProgram.bind();\n    gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read.attach(0));\n    gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read.attach(1));\n    blit(velocity.write);\n    velocity.swap();\n    advectionProgram.bind();\n    gl.uniform2f(advectionProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\n    if (!ext.supportLinearFiltering) gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, velocity.texelSizeX, velocity.texelSizeY);\n    let velocityId = velocity.read.attach(0);\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\n    gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\n    gl.uniform1f(advectionProgram.uniforms.dt, dt);\n    gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);\n    blit(velocity.write);\n    velocity.swap();\n    if (!ext.supportLinearFiltering) gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, dye.texelSizeX, dye.texelSizeY);\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0));\n    gl.uniform1i(advectionProgram.uniforms.uSource, dye.read.attach(1));\n    gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);\n    blit(dye.write);\n    dye.swap();\n}\nfunction render(target) {\n    if (config.BLOOM) applyBloom(dye.read, bloom);\n    if (config.SUNRAYS) {\n        applySunrays(dye.read, dye.write, sunrays);\n        blur(sunrays, sunraysTemp, 1);\n    }\n    if (target == null || !config.TRANSPARENT) {\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.BLEND);\n    } else {\n        gl.disable(gl.BLEND);\n    }\n    if (!config.TRANSPARENT) drawColor(target, normalizeColor(config.BACK_COLOR));\n    if (target == null && config.TRANSPARENT) drawCheckerboard(target);\n    drawDisplay(target);\n}\nfunction drawColor(target, color) {\n    colorProgram.bind();\n    gl.uniform4f(colorProgram.uniforms.color, color.r, color.g, color.b, 1);\n    blit(target);\n}\nfunction drawCheckerboard(target) {\n    checkerboardProgram.bind();\n    gl.uniform1f(checkerboardProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n    blit(target);\n}\nfunction drawDisplay(target) {\n    let width = target == null ? gl.drawingBufferWidth : target.width;\n    let height = target == null ? gl.drawingBufferHeight : target.height;\n    displayMaterial.bind();\n    if (config.SHADING) gl.uniform2f(displayMaterial.uniforms.texelSize, 1.0 / width, 1.0 / height);\n    gl.uniform1i(displayMaterial.uniforms.uTexture, dye.read.attach(0));\n    if (config.BLOOM) {\n        gl.uniform1i(displayMaterial.uniforms.uBloom, bloom.attach(1));\n        gl.uniform1i(displayMaterial.uniforms.uDithering, ditheringTexture.attach(2));\n        let scale = getTextureScale(ditheringTexture, width, height);\n        gl.uniform2f(displayMaterial.uniforms.ditherScale, scale.x, scale.y);\n    }\n    if (config.SUNRAYS) gl.uniform1i(displayMaterial.uniforms.uSunrays, sunrays.attach(3));\n    blit(target);\n}\nfunction applyBloom(source, destination) {\n    if (bloomFramebuffers.length < 2) return;\n    let last = destination;\n    gl.disable(gl.BLEND);\n    bloomPrefilterProgram.bind();\n    let knee = config.BLOOM_THRESHOLD * config.BLOOM_SOFT_KNEE + 0.0001;\n    let curve0 = config.BLOOM_THRESHOLD - knee;\n    let curve1 = knee * 2;\n    let curve2 = 0.25 / knee;\n    gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2);\n    gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, config.BLOOM_THRESHOLD);\n    gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source.attach(0));\n    blit(last);\n    bloomBlurProgram.bind();\n    for(let i = 0; i < bloomFramebuffers.length; i++){\n        let dest = bloomFramebuffers[i];\n        gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\n        gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\n        blit(dest);\n        last = dest;\n    }\n    gl.blendFunc(gl.ONE, gl.ONE);\n    gl.enable(gl.BLEND);\n    for(let i1 = bloomFramebuffers.length - 2; i1 >= 0; i1--){\n        let baseTex = bloomFramebuffers[i1];\n        gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\n        gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\n        gl.viewport(0, 0, baseTex.width, baseTex.height);\n        blit(baseTex);\n        last = baseTex;\n    }\n    gl.disable(gl.BLEND);\n    bloomFinalProgram.bind();\n    gl.uniform2f(bloomFinalProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\n    gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last.attach(0));\n    gl.uniform1f(bloomFinalProgram.uniforms.intensity, config.BLOOM_INTENSITY);\n    blit(destination);\n}\nfunction applySunrays(source, mask, destination) {\n    gl.disable(gl.BLEND);\n    sunraysMaskProgram.bind();\n    gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, source.attach(0));\n    blit(mask);\n    sunraysProgram.bind();\n    gl.uniform1f(sunraysProgram.uniforms.weight, config.SUNRAYS_WEIGHT);\n    gl.uniform1i(sunraysProgram.uniforms.uTexture, mask.attach(0));\n    blit(destination);\n}\nfunction blur(target, temp, iterations) {\n    blurProgram.bind();\n    for(let i = 0; i < iterations; i++){\n        gl.uniform2f(blurProgram.uniforms.texelSize, target.texelSizeX, 0.0);\n        gl.uniform1i(blurProgram.uniforms.uTexture, target.attach(0));\n        blit(temp);\n        gl.uniform2f(blurProgram.uniforms.texelSize, 0.0, target.texelSizeY);\n        gl.uniform1i(blurProgram.uniforms.uTexture, temp.attach(0));\n        blit(target);\n    }\n}\nfunction splatPointer(pointer) {\n    let dx = pointer.deltaX * config.SPLAT_FORCE;\n    let dy = pointer.deltaY * config.SPLAT_FORCE;\n    splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\n}\nfunction multipleSplats(amount) {\n    for(let i = 0; i < amount; i++){\n        const color = generateColor();\n        color.r *= 10.0;\n        color.g *= 10.0;\n        color.b *= 10.0;\n        const x = Math.random();\n        const y = Math.random();\n        const dx = 1000 * (Math.random() - 0.5);\n        const dy = 1000 * (Math.random() - 0.5);\n        splat(x, y, dx, dy, color);\n    }\n}\nfunction splat(x, y, dx, dy, color) {\n    splatProgram.bind();\n    gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0));\n    gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n    gl.uniform2f(splatProgram.uniforms.point, x, y);\n    gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0.0);\n    gl.uniform1f(splatProgram.uniforms.radius, correctRadius(config.SPLAT_RADIUS / 100.0));\n    blit(velocity.write);\n    velocity.swap();\n    gl.uniform1i(splatProgram.uniforms.uTarget, dye.read.attach(0));\n    gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\n    blit(dye.write);\n    dye.swap();\n}\nfunction correctRadius(radius) {\n    let aspectRatio = canvas.width / canvas.height;\n    if (aspectRatio > 1) radius *= aspectRatio;\n    return radius;\n}\ncanvas.addEventListener(\"mousedown\", (e)=>{\n    let posX = scaleByPixelRatio(e.offsetX);\n    let posY = scaleByPixelRatio(e.offsetY);\n    let pointer = pointers.find((p)=>p.id == -1);\n    if (pointer == null) pointer = new pointerPrototype();\n    updatePointerDownData(pointer, -1, posX, posY);\n});\ncanvas.addEventListener(\"mousemove\", (e)=>{\n    let pointer = pointers[0];\n    if (!pointer.down) return;\n    let posX = scaleByPixelRatio(e.offsetX);\n    let posY = scaleByPixelRatio(e.offsetY);\n    updatePointerMoveData(pointer, posX, posY);\n});\nwindow.addEventListener(\"mouseup\", ()=>{\n    updatePointerUpData(pointers[0]);\n});\ncanvas.addEventListener(\"touchstart\", (e)=>{\n    e.preventDefault();\n    const touches = e.targetTouches;\n    while(touches.length >= pointers.length)pointers.push(new pointerPrototype());\n    for(let i = 0; i < touches.length; i++){\n        let posX = scaleByPixelRatio(touches[i].pageX);\n        let posY = scaleByPixelRatio(touches[i].pageY);\n        updatePointerDownData(pointers[i + 1], touches[i].identifier, posX, posY);\n    }\n});\ncanvas.addEventListener(\"touchmove\", (e)=>{\n    e.preventDefault();\n    const touches = e.targetTouches;\n    for(let i = 0; i < touches.length; i++){\n        let pointer = pointers[i + 1];\n        if (!pointer.down) continue;\n        let posX = scaleByPixelRatio(touches[i].pageX);\n        let posY = scaleByPixelRatio(touches[i].pageY);\n        updatePointerMoveData(pointer, posX, posY);\n    }\n}, false);\nwindow.addEventListener(\"touchend\", (e)=>{\n    const touches = e.changedTouches;\n    for(let i = 0; i < touches.length; i++){\n        let pointer = pointers.find((p)=>p.id == touches[i].identifier);\n        if (pointer == null) continue;\n        updatePointerUpData(pointer);\n    }\n});\nwindow.addEventListener(\"keydown\", (e)=>{\n    if (e.code === \"KeyP\") config.PAUSED = !config.PAUSED;\n    if (e.key === \" \") splatStack.push(parseInt(Math.random() * 20) + 5);\n});\nfunction updatePointerDownData(pointer, id, posX, posY) {\n    pointer.id = id;\n    pointer.down = true;\n    pointer.moved = false;\n    pointer.texcoordX = posX / canvas.width;\n    pointer.texcoordY = 1.0 - posY / canvas.height;\n    pointer.prevTexcoordX = pointer.texcoordX;\n    pointer.prevTexcoordY = pointer.texcoordY;\n    pointer.deltaX = 0;\n    pointer.deltaY = 0;\n    pointer.color = generateColor();\n}\nfunction updatePointerMoveData(pointer, posX, posY) {\n    pointer.prevTexcoordX = pointer.texcoordX;\n    pointer.prevTexcoordY = pointer.texcoordY;\n    pointer.texcoordX = posX / canvas.width;\n    pointer.texcoordY = 1.0 - posY / canvas.height;\n    pointer.deltaX = correctDeltaX(pointer.texcoordX - pointer.prevTexcoordX);\n    pointer.deltaY = correctDeltaY(pointer.texcoordY - pointer.prevTexcoordY);\n    pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\n}\nfunction updatePointerUpData(pointer) {\n    pointer.down = false;\n}\nfunction correctDeltaX(delta) {\n    let aspectRatio = canvas.width / canvas.height;\n    if (aspectRatio < 1) delta *= aspectRatio;\n    return delta;\n}\nfunction correctDeltaY(delta) {\n    let aspectRatio = canvas.width / canvas.height;\n    if (aspectRatio > 1) delta /= aspectRatio;\n    return delta;\n}\nfunction generateColor() {\n    let c = HSVtoRGB(Math.random(), 1.0, 1.0);\n    c.r *= 0.15;\n    c.g *= 0.15;\n    c.b *= 0.15;\n    return c;\n}\nfunction HSVtoRGB(h, s, v) {\n    let r, g, b, i, f, p, q, t;\n    i = Math.floor(h * 6);\n    f = h * 6 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n    switch(i % 6){\n        case 0:\n            r = v, g = t, b = p;\n            break;\n        case 1:\n            r = q, g = v, b = p;\n            break;\n        case 2:\n            r = p, g = v, b = t;\n            break;\n        case 3:\n            r = p, g = q, b = v;\n            break;\n        case 4:\n            r = t, g = p, b = v;\n            break;\n        case 5:\n            r = v, g = p, b = q;\n            break;\n    }\n    return {\n        r,\n        g,\n        b\n    };\n}\n_c1 = HSVtoRGB;\nfunction normalizeColor(input) {\n    let output = {\n        r: input.r / 255,\n        g: input.g / 255,\n        b: input.b / 255\n    };\n    return output;\n}\nfunction wrap(value1, min, max) {\n    let range = max - min;\n    if (range == 0) return min;\n    return (value1 - min) % range + min;\n}\nfunction getResolution(resolution) {\n    let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight;\n    if (aspectRatio < 1) aspectRatio = 1.0 / aspectRatio;\n    let min = Math.round(resolution);\n    let max = Math.round(resolution * aspectRatio);\n    if (gl.drawingBufferWidth > gl.drawingBufferHeight) return {\n        width: max,\n        height: min\n    };\n    else return {\n        width: min,\n        height: max\n    };\n}\nfunction getTextureScale(texture, width, height) {\n    return {\n        x: width / texture.width,\n        y: height / texture.height\n    };\n}\nfunction scaleByPixelRatio(input) {\n    let pixelRatio = window.devicePixelRatio || 1;\n    return Math.floor(input * pixelRatio);\n}\nfunction hashCode(s) {\n    if (s.length == 0) return 0;\n    let hash = 0;\n    for(let i = 0; i < s.length; i++){\n        hash = (hash << 5) - hash + s.charCodeAt(i);\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n}\nvar _c, _c1;\n$RefreshReg$(_c, \"CHECK_FRAMEBUFFER_STATUS\");\n$RefreshReg$(_c1, \"HSVtoRGB\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./shared/lib/webgl.js\n"));

/***/ })

});